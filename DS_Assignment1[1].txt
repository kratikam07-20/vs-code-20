#include<iostream>
#include<stdlib.h>
using namespace std;
struct Passenger
{
    int SeatNo;
    char name[50];
    int Age;
    char gender;
    Passenger *next;
};
int totalseats=30;
int *seats=nullptr;
Passenger *head=nullptr;


void bookTicket() {
    int seatNo = -1;

    
    for (int i = 0; i < totalseats; i++) {
        if (seats[i] == 0) {
            seatNo = i + 1; 
            seats[i] = 1;   
            break;
        }
    }

    if (seatNo == -1) {
        cout << "Sorry! No seats available.\n";
        return;
    }

    Passenger* newPassenger = (Passenger*) malloc(sizeof(Passenger));
    newPassenger->SeatNo = seatNo;
    cout << "Enter Name: ";
    cin >> newPassenger->name;
    cout << "Enter Age: ";
    cin >> newPassenger->Age;
    cout << "Enter Gender (M/F): ";
    cin >> newPassenger->gender;
   

    newPassenger->next = NULL;

    
    if (head == NULL) {
        head = newPassenger;
    } else {
        Passenger* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newPassenger;
    }

    cout << "Ticket booked! Seat No: " << seatNo << "\n";
}
void cancelTicket() {
    int seatNo;
    cout << "Enter Seat Number to cancel: ";
    cin >> seatNo;

    if (seatNo < 1 , seatNo > totalseats , seats[seatNo - 1] == 0) {
        cout << "Invalid seat number or seat not booked.\n";
        return;
    }

    seats[seatNo - 1] = 0; 


    Passenger* temp = head;
    Passenger* prev = NULL;

    while (temp != NULL && temp->SeatNo != seatNo) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == NULL) {
        cout << "Passenger not found.\n";
        return;
    }

    if (prev == NULL) {
        head = temp->next;
    } else {
        prev->next = temp->next;
    }

    free(temp);
    cout << "Ticket for Seat No " << seatNo << " has been cancelled.\n";
}
void viewTrainStatus() {
    cout << "\n--- Train Status ---\n";
    for (int i = 0; i < totalseats; i++) {
        cout << "Seat " << (i + 1) << ": " ;
        if (seats[i]==1){
            cout<<"Booked";

        }
        else{
            cout<<"Available";
        }
        cout<<"\n";
    }

}
void viewPassengerList() {
    if (head == NULL) {
        cout << "No passengers booked yet.\n";
        return;
    }

    cout << "\n--- Passenger List ---\n";
    Passenger* temp = head;
    while (temp != NULL) {
       
        cout << "Seat No: " << temp->SeatNo << " | Name: " << temp->name  << " | Age: " << temp->Age << " | Gender: " << temp->gender << "\n";
        temp = temp->next;
    }
}
void freeMemory() {
    free(seats); 
    Passenger* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}
int main() {
    
    seats = (int*) malloc(totalseats * sizeof(int));
    if (seats == NULL) {
        cout << "Fatal Error: Failed to allocate memory for seats array.\n";
        return 1;
    }
    
    for (int i = 0; i < totalseats; i++) {
        seats[i] = 0;
    }

  
    int choice = 0; 
    while (choice != 5) {
        
        
        cout << "\n--- Railway Reservation System ---\n";
        cout << "1. Book Ticket\n";
        cout << "2. Cancel Ticket\n";
        cout << "3. View Train Status\n";
        cout << "4. View Passenger List\n";
        cout << "5. Exit\n"; 
        cout << "Enter your choice: ";
        
        if (!(cin >> choice)) {
             cin.clear(); 
             cin.ignore(10000, '\n'); 
             choice = 0; 
        }

       
        if (choice == 1) {
            bookTicket();
        } else if (choice == 2) {
            cancelTicket();
        } else if (choice == 3) {
            viewTrainStatus();
        } else if (choice == 4) {
            viewPassengerList();
        } else if (choice == 5) {
            
            cout << "Exiting system.\n";
        } else {
            cout << "Invalid choice! Try again.\n";
        }
    } 

   
    freeMemory(); 
    cout << "Program finished. Memory freed!\n";

    return 0;
}

